@using Microsoft.AspNetCore.Identity
@using PlanSuite.Models.Persistent
@using PlanSuite.Services;
@using PlanSuite.Utility;
@inject UserManager<ApplicationUser> UserManager
@inject LocalisationService Localisation
@model PlanSuite.Models.Temporary.ProjectViewModel
@{
    var user = await UserManager.GetUserAsync(User);
    int view = UrlUtility.GetUrlRouteInt(Context.Request, "view");
    Guid filterByTeamMember = UrlUtility.GetUrlRouteGuid(Context.Request, "filterByTeamMember");
}

<script src="~/lib/fullCalendar/dist/fullCalendar.min.js" asp-append-version="true"></script>
<link rel="stylesheet" href="~/css/Calendar.css" asp-append-version="true" />

<p class="mt-2"><a href="#" class="btn ps-btn-secondary" data-bs-toggle="modal" data-bs-target="#teamMemberModal"><i class="bi bi-person"></i> Filter by Team Member</a></p>
<div id="calendarViewError" class="ps-alert ps-alert-error d-none"><i class="bi bi-exclamation-circle"></i> @Localisation.Get(user, "CALENDAR_VIEW_ERROR_1")</div>
<div id="calendarViewLoading">
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
</div>
<input type="hidden" id="CalendarViewProjectId" value="@Model.Project.Id" />
<div id="calendar"></div>

<div class="modal" tabindex="-1" id="teamMemberModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Filter by Team Member</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="list-group">
                @if(filterByTeamMember == Guid.Empty)
                {
                    <a asp-controller="Project" asp-route-id="@Model.Project.Id" asp-route-view="@view" class="list-group-item list-group-item-action active">Nobody</a>
                }
                else
                {
                    <a asp-controller="Project" asp-route-id="@Model.Project.Id" asp-route-view="@view" class="list-group-item list-group-item-action">Nobody</a>
                }
                @foreach(var teamMember in Model.TeamMembers)
                {
                    if(filterByTeamMember == teamMember.Key)
                    {
                        <a asp-controller="Project" asp-route-id="@Model.Project.Id" asp-route-view="@view" asp-route-filterByTeamMember="@teamMember.Key" class="list-group-item list-group-item-action active" aria-current="true">@teamMember.Value</a>
                    }
                    else
                    {
                        <a asp-controller="Project" asp-route-id="@Model.Project.Id" asp-route-view="@view" asp-route-filterByTeamMember="@teamMember.Key" class="list-group-item list-group-item-action">@teamMember.Value</a>
                    }
                }
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn ps-btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script type="module">
    import { ProjectCommon } from "/js/project/projectCommon.js";

    function getHeaderProps() {
        return {
            left: window.innerWidth >= 765 ? 'today,prev,next' : 'prev,next',
            center: window.innerWidth >= 765 ? 'title' : '',
            right: window.innerWidth >= 765 ? 'multiMonthYear,dayGridMonth,dayGridWeek' : ''
        }
    }

    function getCustomButtons() {
        return {
            unscheduledTasks: {
                text: 'Unscheduled Task',
                click: function () {
                    var offcanvasEl = document.getElementById("unscheduledTasks");
                    new bootstrap.Offcanvas(offcanvasEl);
                }
            }
        }
    }

    function getEvents() {
        return [
            {
                url: "/api/Project/GetCalendarTasks",
                method: "POST",
                extraParams: {
                    id: "@Model.Project.Id",
                    teamMember: "@filterByTeamMember"
                },
                failure: function () {
                    $("#calendarViewError").removeClass("d-none");
                    $("#calendar").addClass("d-none");
                    $("#calendarViewLoading").addClass("d-none");
                },
                success: function () {
                    $("#calendarViewLoading").addClass("d-none");
                }
            }
        ]
    }

    document.addEventListener('DOMContentLoaded', function () {
        var calendarEl = document.getElementById('calendar');
        var calendar = new FullCalendar.Calendar(calendarEl, {
            timeZone: 'UTC',
            themeSystem: 'bootstrap5',
            customButtons: getCustomButtons(),
            initialView: window.innerWidth >= 765 ? 'dayGridMonth' : 'dayGridWeek',
            headerToolbar: getHeaderProps(),
            firstDay: 1,
            eventSources: getEvents(),
            selectable: true,
            editable: true,
            eventsSet: function (events) {
                events.forEach(element => {
                    if (element._def.extendedProps.completed == true)
                    {
                        console.log(element._def.sourceId +" is completed");
                    }
                });
            },
            eventClick: function (info) {
                console.log(`view card ${info.event.id}`);
                ProjectCommon.viewCardButton(info.event.id);

                // Show card
                $("#viewCardModal").modal('show');
            },
            select: function (info) {
                console.log('selected ' + info.startStr + ' to ' + info.endStr);
            },
            eventResize: function (info) {
                console.log(
                    info.event.id + " start is now " + info.event.start.toISOString() + "\n" +
                    info.event.id + " end is now " + info.event.end.toISOString() + "\n"
                );
                ProjectCommon.editTaskDates(info.event.id, info.event.start.toISOString(), info.event.end.toISOString());
            },
            eventDrop: function (info) {
                console.log(
                    info.event.id + " start is now " + info.event.start.toISOString() + "\n" +
                    info.event.id + " end is now " + info.event.end.toISOString() + "\n"
                );
                ProjectCommon.editTaskDates(info.event.id, info.event.start.toISOString(), info.event.end.toISOString());
            },
            windowResize: function(info) {
                calendar.changeView(window.innerWidth >= 765 ? 'dayGridMonth' : 'dayGridWeek')
                calendar.setOption('header', getHeaderProps());
            }
        });

        calendar.render();
    });
</script>