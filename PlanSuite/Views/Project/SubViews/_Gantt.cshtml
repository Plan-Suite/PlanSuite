@using Microsoft.AspNetCore.Identity
@using PlanSuite.Models.Persistent
@using PlanSuite.Services;
@inject UserManager<ApplicationUser> UserManager
@inject LocalisationService Localisation
@model PlanSuite.Models.Temporary.ProjectViewModel
@{
    var user = await UserManager.GetUserAsync(User);
}

<p>@Localisation.Get(user, "PROGRESS_VIEW_HELP_1")</p>
@foreach (var column in Model.Columns)
{
    <div class="container mt-1 table-responsive progress-list-col" id="colIndex_@Model.Columns.IndexOf(column)">
        <h5 class="task-list-name">@column.Title</h5>
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>@Localisation.Get(user, "NAME")</th>
                    <th>@Localisation.Get(user, "START_DATE")</th>
                    <th>@Localisation.Get(user, "END_DATE")</th>
                    <th>@Localisation.Get(user, "DURATION")</th>
                    <th>@Localisation.Get(user, "PROGRESS")</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var task in Model.Cards)
                {
                    if(task.ColumnId == column.Id)
                    {
                        string duration = Localisation.Get(user, "NOT_AVAILABLE");
                        if (task.CardStartDate != null && task.CardDueDate != null)
                        {
                            DateTime startTime = (DateTime)task.CardStartDate;
                            DateTime endTime = (DateTime)task.CardDueDate;
                            TimeSpan span = endTime.Subtract(startTime);
                            duration = string.Format(Localisation.Get(user, "TOTAL_DAYS"), (int)span.TotalDays);
                        }

                        // Progress formula: (checklistItemsCompleted / checklistItemCount) * 100
                        int checklistItemsCompleted = 0, checklistItemCount = 0;
                        foreach(var checklistItem in Model.ChecklistItems)
                        {
                            if(checklistItem.ChecklistItemCard == task.Id)
                            {
                                checklistItemCount++;
                                if(checklistItem.checklistItemTicked == true)
                                {
                                    checklistItemsCompleted++;
                                }
                            }
                        }

                        float currentProgress = 0;
                        if (checklistItemCount > 0)
                        {
                            Console.WriteLine($"{task.CardName} ({checklistItemsCompleted} / {checklistItemCount}) * 100");
                            currentProgress = (float)checklistItemsCompleted / checklistItemCount * 100;
                            currentProgress = (float)Math.Round(currentProgress);
                            Console.WriteLine($"{task.CardName} currentProgress: {currentProgress}");
                        }

                        <tr class="cursor-pointer progress-task-item" id="@task.Id" data-bs-toggle="modal" data-bs-target="#viewCardModal">
                            @{
                                string taskIcon = string.Empty;
                                string taskStatus = "task-normal";
                                if (task.CardDueDate != null)
                                {
                                    if (task.IsFinished)
                                    {
                                        taskStatus = "task-completed";
                                        currentProgress = 100f;
                                    }
                                    else if (DateTime.Now > task.CardDueDate)
                                    {
                                        taskStatus = "task-overdue";
                                        taskIcon = "<span class=\"bi bi-exclamation-triangle\"></span>";
                                    }
                                    else if (DateTime.Now < task.CardDueDate && DateTime.Now.AddDays(5) > task.CardDueDate)
                                    {
                                        taskStatus = "task-warning";
                                        taskIcon = "<span class=\"bi bi-exclamation-circle\"></span>";
                                    }
                                }
                            }

                            <td>@Html.Raw(taskIcon) @task.CardName</td>
                            <td>@task.CardStartDate</td>
                            <td>@task.CardDueDate</td>
                            <td>@duration</td>
                            <td>
                                <div class="progress">
                                    <div class="progress-bar @taskStatus" role="progressbar" style="width: @currentProgress%;" aria-valuenow="@currentProgress" aria-valuemin="0" aria-valuemax="100">
                                        @currentProgress%
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                }
                <tr class="progress-add-task" id="@column.Id" data-bs-toggle="modal" data-bs-target="#addTaskModal">
                    <td colspan="5"><i class="bi bi-plus-circle"></i> @Localisation.Get(user, "CREATE_NEW_TASK")</td>
                </tr>
            </tbody>
        </table>
    </div>
}
<script type="module" src="~/js/project/progressView.js" asp-append-version="true"></script>