@using Microsoft.AspNetCore.Http.Extensions
@using Microsoft.AspNetCore.Identity
@using PlanSuite.Enums
@using PlanSuite.Models.Persistent
@using PlanSuite.Services;
@using PlanSuite.Utility
@using System.Web
@inject UserManager<ApplicationUser> UserManager
@inject LocalisationService Localisation
@model PlanSuite.Models.Temporary.ProjectViewModel
@{
    ViewData["Title"] = Model.Project.Name;
    ApplicationUser user = await UserManager.GetUserAsync(User);
    ProjectIndexView indexView = (ProjectIndexView)UrlUtility.GetUrlRouteInt(Context.Request, "view");
    Model.MarkComplete.ProjectId = Model.Project.Id;

    int view = UrlUtility.GetUrlRouteInt(Context.Request, "view");
    Guid filterByTeamMember = UrlUtility.GetUrlRouteGuid(Context.Request, "filterByTeamMember");
    TaskCompletionFilter taskCompletionFilter = (TaskCompletionFilter)UrlUtility.GetUrlRouteInt(Context.Request, "filterByTaskCompleted");
    TaskOverdueFilter taskOverdueFilter = (TaskOverdueFilter)UrlUtility.GetUrlRouteInt(Context.Request, "filterByTaskOverdue");
    Priority taskPriorityFilter = (Priority)UrlUtility.GetUrlRouteInt(Context.Request, "filterByTaskPriority");
}

@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@functions {
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }

    async Task ProjectLink(string text, string linkClass, int projectView, Guid filterByTeamMember, TaskCompletionFilter filterByTaskCompleted, TaskOverdueFilter filterByTaskOverdue, Priority filterByTaskPriority)
    {
        <a class="@linkClass"
            asp-controller="Project"
            asp-action="Index"
            asp-route-view="@projectView"
            asp-route-id="@Model.Project.Id"
            asp-route-filterByTeamMember="@filterByTeamMember"
            asp-route-filterByTaskCompleted="@((int)filterByTaskCompleted)"
            asp-route-filterByTaskOverdue="@((int)TaskOverdueFilter.None)"
            asp-route-filterByTaskPriority="@((int)filterByTaskPriority)">
            @text
        </a>
    }
}

<link href="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote.min.css" rel="stylesheet" />
@*<script type="module" src="~/js/project/index.js" asp-append-version="true"></script>*@

<div class="container">

    <input type="hidden" 
           id="RequestVerificationToken"
           name="RequestVerificationToken" 
           value="@GetAntiXsrfRequestToken()">

    <h1 class="text-center">@Model.Project.Name</h1>
    <hr />
    <div class="ps-alert ps-alert-success d-none" id="addUserSuccess" role="alert">@Localisation.Get(user, "ADD_USER_SUCCESS")</div>
    <div class="ps-alert ps-alert-danger d-none" id="addUserFail" role="alert">@Localisation.Get(user, "ADD_USER_FAIL")</div>
    @if(Model.Project.ProjectCompleted == true)
    {
        <div class="ps-alert ps-alert-warning text-center" role="alert">@Localisation.Get(user, "ALERT_PROJECT_COMPLETE")</div>
    }
    <h4 class="text-muted">@Model.Project.Description</h4>
    <p class="text-muted"><strong>Project Created:</strong> @Model.Project.CreatedDate<br /><strong>Project Due Date:</strong>
        @if(Model.Project.DueDate != null)
        {
             @Model.Project.DueDate
        }
        else 
        {
            <text>N/A</text>
        }
    <br /><strong>Project Organisation:</strong>
        @if(Model.Organisation != null)
        {
             @Model.Organisation.Name
        }
        else 
        {
            <text>N/A</text>
        }
        @if (user.PaymentTier >= PaymentTier.Plus && Model.Project.Budget > 0.0m)
        {
            <br />
            <strong>Project Budget:</strong> @user.FormatBudget(Model.UsedBudget, Model.Project.BudgetMonetaryUnit, Model.Project.BudgetType)<text>/</text>@user.FormatMaxBudget(Model.Project.Budget, Model.Project.BudgetMonetaryUnit, Model.Project.BudgetType)
            //@if(Mode)
        }
    </p>

    @* Add Column *@
    <div class="modal fade" id="addColumnModal" tabindex="-1" aria-labelledby="addColumnLabel" aria-hidden="true">
        <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
            <h5 class="modal-title" id="editProjectLabel"><strong>Add Column:</strong> Name Here</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form method="post" asp-controller="Project" asp-action="AddColumn">
                @Html.HiddenFor(model => model.AddColumn.ProjectId)
                <div class="modal-body">
                    <div class="form-floating">
                        @Html.EditorFor(model => model.AddColumn.Name, new { htmlAttributes = new { @class = "form-control", id = "editProjName" } })
                        @Html.LabelFor(model => model.AddColumn.Name, new { htmlAttributes = new { @class = "form-label" } })
                        @Html.ValidationMessageFor(model => model.AddColumn.Name, "", new { @class = "text-danger" })
                        <br>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn ps-btn-secondary" data-bs-dismiss="modal">@Localisation.Get(user, "CLOSE")</button>
                        <button type="submit" class="btn ps-btn-primary">@Localisation.Get(user, "SAVE_COLUMN")</button>
                    </div>
                </div>
            </form>
        </div>
        </div>
    </div>

    <input type="hidden" id="projectId" value="@Model.Project.Id"/>
    <input type="hidden" id="userId" value="@Model.UserId"/>
    <input type="hidden" id="filterByTeamMember" value="@filterByTeamMember" />

    @* View Card *@
    <partial name="SubViews/_ViewCard" />

    @* Project Members *@
    <partial name="SubViews/_ProjectMembers" />

    @* Leave Project *@
    <partial name="SubViews/_LeaveProject" />

    @* Add Member *@
    <partial name="SubViews/_AddMember" />

    @* Add Task *@
    <partial name="SubViews/_AddTask" />

    @* Milestones *@
    @if(Model.PaymentTier >= PaymentTier.Plus)
    {
        <partial name="SubViews/_ListMilestones" />
        <partial name="SubViews/_AddMilestone" />
        <partial name="SubViews/_EditMilestone" />
        <partial name="SubViews/_DeleteMilestone" />
        <partial name="SubViews/_PieChart" />
    }

    <div class="modal" tabindex="-1" id="teamMemberModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Filter by Team Member</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="list-group">
                        @if (filterByTeamMember == Guid.Empty)
                        {
                            await ProjectLink("Nobody", "list-group-item list-group-item-action active", view, Guid.Empty, taskCompletionFilter, taskOverdueFilter, taskPriorityFilter);
                        }
                        else
                        {
                            await ProjectLink("Nobody", "list-group-item list-group-item-action", view, Guid.Empty, taskCompletionFilter, taskOverdueFilter, taskPriorityFilter);
                        }
                        @foreach (var teamMember in Model.TeamMembers)
                        {
                            if (filterByTeamMember == teamMember.Key)
                            {
                                await ProjectLink(teamMember.Value, "list-group-item list-group-item-action active", view, teamMember.Key, taskCompletionFilter, taskOverdueFilter, taskPriorityFilter);
                            }
                            else
                            {
                                await ProjectLink(teamMember.Value, "list-group-item list-group-item-action", view, teamMember.Key, taskCompletionFilter, taskOverdueFilter, taskPriorityFilter);
                            }
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn ps-btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    @* Project Navbar *@
    <div class="col col-sm-10">
        <button type="button" class="btn m-1 ps-btn-success float-start" data-bs-toggle="modal" data-bs-target="#addColumnModal" id="addColumnBtn"><i class="bi bi-layout-three-columns"></i> @Localisation.Get(user, "ADD_COLUMN")</button>
        @if(Model.PaymentTier >= PaymentTier.Plus)
        {
            <button type="button" class="btn m-1 ps-btn-secondary" data-bs-toggle="modal" data-bs-target="#milestonesModal" id="listMilestonesBtn"><i class="bi bi-signpost"></i> @Localisation.Get(user, "MILESTONES")</button>
        }
        @if(Model.ProjectRole >= PlanSuite.Enums.ProjectRole.Admin)
        {
            <form style="display: inline;" method="post" asp-controller="Project" asp-action="MarkComplete">
                @Html.HiddenFor(model => Model.MarkComplete.ProjectId)
                @if(Model.Project.ProjectCompleted)
                {
                    <button type="submit" class="btn m-1 ps-btn-secondary"><i class="bi bi-door-open"></i> @Localisation.Get(user, "MARK_ACTIVE")</button>
                }
                else
                {
                    <button type="submit" class="btn m-1 ps-btn-secondary"><i class="bi bi-door-closed"></i> @Localisation.Get(user, "MARK_COMPLETE")</button>
                }
            </form>
        }
        <div class="btn-group" role="group">
            <button id="btnGroupDrop1" type="button" class="btn m-1 ps-btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false"><i class="bi bi-three-dots"></i> @Localisation.Get(user, "MORE")</button>
            <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                <li><a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#projectMembersModal" id="seeMembersBtn"><i class="bi bi-people"></i> @Localisation.Get(user, "SEE_MEMBERS")</a></li>
                @if (Model.PaymentTier >= PaymentTier.Plus)
                {
                    <li><a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#pieChartModel"><i class="bi bi-pie-chart"></i> @Localisation.Get(user, "DATA_VIEW")</a></li>
                }
                @if(Model.ProjectRole >= PlanSuite.Enums.ProjectRole.Admin)
                {
                    <li><hr class="dropdown-divider"></li>
                    <li><a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#addMemberModal"><i class="bi bi-person-plus"></i> @Localisation.Get(user, "ADD_MEMBER")</a></li>
                    <li><a class="dropdown-item" asp-controller="Project" asp-action="Logs" asp-route-projectId="@Model.Project.Id"><i class="bi bi-clipboard2-check"></i> @Localisation.Get(user, "AUDIT_LOGS")</a></li>

                    // asp-controller="Project" asp-action="Logs" asp-route-id="@item.Id"
                }
                @if(Model.ProjectRole != PlanSuite.Enums.ProjectRole.Owner)
                {
                    <li><hr class="dropdown-divider"></li>
                    <li><a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#leaveProjectModal"><i class="bi bi-box-arrow-left"></i> @Localisation.Get(user, "LEAVE_PROJECT")</a></li>
                }
            </ul>
        </div>
    </div>
    <div class="col col-sm-10">
        @{
            string filterIcon = "bi bi-filter-circle";
            string filterByTeamMemberIcon = "bi bi-person";
            if(filterByTeamMember != Guid.Empty)
            {
                filterByTeamMemberIcon = "bi bi-person-fill";
                filterIcon = "bi bi-filter-circle-fill";
            }

            string filterByTaskCompletedIcon = "bi bi-check-circle";
            if (taskCompletionFilter != TaskCompletionFilter.None)
            {
                filterByTaskCompletedIcon = "bi bi-check-circle-fill";
                filterIcon = "bi bi-filter-circle-fill";
            }

            string filterByTaskOverdueIcon = "bi bi-alarm";
            if (taskOverdueFilter != TaskOverdueFilter.None)
            {
                filterByTaskOverdueIcon = "bi bi-alarm-fill";
                filterIcon = "bi bi-filter-circle-fill";
            }

            string filterByTaskPriorityIcon = "bi bi-arrow-up-circle";
            if (taskPriorityFilter != Priority.None)
            {
                filterByTaskPriorityIcon = "bi bi-arrow-up-circle-fill";
                filterIcon = "bi bi-filter-circle-fill";
            }
        }
        <a class="btn btn-sm m-1 ps-btn-secondary" data-bs-toggle="collapse" href="#collapseExample" role="button" aria-expanded="false" aria-controls="collapseExample">
            <i class="@filterIcon"></i> Filters
        </a>
        <div class="collapse" id="collapseExample">
          <div class="card card-body">
                <div class="dropdown">
                    <button type="button" class="btn btn-sm m-1 ps-btn-secondary" data-bs-toggle="modal" data-bs-target="#teamMemberModal"><i class="@filterByTeamMemberIcon"></i> @Localisation.Get(user, "FILTER_BY_TEAM_MEMBER")</button>
                    <button type="button" class="btn btn-sm m-1 ps-btn-secondary dropdown-toggle" role="button" id="filterByTaskCompletedBtn" data-bs-toggle="dropdown" aria-expanded="false"><i class="@filterByTaskCompletedIcon"></i> @Localisation.Get(user, "FILTER_BY_TASK_COMPLETION_STATUS")</button>
                    <ul class="dropdown-menu" aria-labelledby="filterByTaskCompletedBtn">
                        <li>
                            @if (taskCompletionFilter == TaskCompletionFilter.None)
                            {
                                <a class="dropdown-item" asp-controller="Project" asp-action="Index" asp-route-view="@view" asp-route-id="@Model.Project.Id" asp-route-filterByTeamMember="@filterByTeamMember" asp-route-filterByTaskCompleted="@((int)TaskCompletionFilter.None)" asp-route-filterByTaskOverdue="@((int)taskOverdueFilter)" asp-route-filterByTaskPriority="@((int)taskPriorityFilter)"><i class="bi bi-question-circle-fill"></i> @Localisation.Get(user, "NONE")</a>
                            }
                            else
                            {
                                <a class="dropdown-item" asp-controller="Project" asp-action="Index" asp-route-view="@view" asp-route-id="@Model.Project.Id" asp-route-filterByTeamMember="@filterByTeamMember" asp-route-filterByTaskCompleted="@((int)TaskCompletionFilter.None)" asp-route-filterByTaskOverdue="@((int)taskOverdueFilter)" asp-route-filterByTaskPriority="@((int)taskPriorityFilter)"><i class="bi bi-question-circle"></i> @Localisation.Get(user, "NONE")</a>
                            }
                        </li>
                        <li>
                            @if (taskCompletionFilter == TaskCompletionFilter.Completed)
                            {
                                <a class="dropdown-item" asp-controller="Project" asp-action="Index" asp-route-view="@view" asp-route-id="@Model.Project.Id" asp-route-filterByTeamMember="@filterByTeamMember" asp-route-filterByTaskCompleted="@((int)TaskCompletionFilter.Completed)" asp-route-filterByTaskOverdue="@((int)taskOverdueFilter)" asp-route-filterByTaskPriority="@((int)taskPriorityFilter)"><i class="bi bi-check-circle-fill"></i> @Localisation.Get(user, "COMPLETED")</a>
                            }
                            else
                            {
                                <a class="dropdown-item" asp-controller="Project" asp-action="Index" asp-route-view="@view" asp-route-id="@Model.Project.Id" asp-route-filterByTeamMember="@filterByTeamMember" asp-route-filterByTaskCompleted="@((int)TaskCompletionFilter.Completed)" asp-route-filterByTaskOverdue="@((int)taskOverdueFilter)" asp-route-filterByTaskPriority="@((int)taskPriorityFilter)"><i class="bi bi-check-circle"></i> @Localisation.Get(user, "COMPLETED")</a>
                            }
                        </li>
                        <li>
                            @if (taskCompletionFilter == TaskCompletionFilter.NotCompleted)
                            {
                                <a class="dropdown-item" asp-controller="Project" asp-action="Index" asp-route-view="@view" asp-route-id="@Model.Project.Id" asp-route-filterByTeamMember="@filterByTeamMember" asp-route-filterByTaskCompleted="@((int)TaskCompletionFilter.NotCompleted)" asp-route-filterByTaskOverdue="@((int)taskOverdueFilter)" asp-route-filterByTaskPriority="@((int)taskPriorityFilter)"><i class="bi bi-circle-fill"></i> @Localisation.Get(user, "NOT_COMPLETED")</a>
                            }
                            else
                            {
                                <a class="dropdown-item" asp-controller="Project" asp-action="Index" asp-route-view="@view" asp-route-id="@Model.Project.Id" asp-route-filterByTeamMember="@filterByTeamMember" asp-route-filterByTaskCompleted="@((int)TaskCompletionFilter.NotCompleted)" asp-route-filterByTaskOverdue="@((int)taskOverdueFilter)" asp-route-filterByTaskPriority="@((int)taskPriorityFilter)"><i class="bi bi-circle"></i> @Localisation.Get(user, "NOT_COMPLETED")</a>
                            }

                        </li>
                    </ul>

                    <button type="button" class="btn btn-sm m-1 ps-btn-secondary dropdown-toggle" role="button" id="filterByTaskOverdueBtn" data-bs-toggle="dropdown" aria-expanded="false"><i class="@filterByTaskOverdueIcon"></i> @Localisation.Get(user, "FILTER_BY_TASK_OVERDUE_STATUS")</button>
                    <ul class="dropdown-menu" aria-labelledby="filterByTaskOverdueBtn">
                        <li>
                            @if (taskOverdueFilter == TaskOverdueFilter.None)
                            {
                                <a class="dropdown-item" asp-controller="Project" asp-action="Index" asp-route-view="@view" asp-route-id="@Model.Project.Id" asp-route-filterByTeamMember="@filterByTeamMember" asp-route-filterByTaskCompleted="@((int)taskCompletionFilter)" asp-route-filterByTaskOverdue="@((int)TaskOverdueFilter.None)" asp-route-filterByTaskPriority="@((int)taskPriorityFilter)"><i class="bi bi-question-circle-fill"></i> @Localisation.Get(user, "NONE")</a>
                            }
                            else
                            {
                                <a class="dropdown-item" asp-controller="Project" asp-action="Index" asp-route-view="@view" asp-route-id="@Model.Project.Id" asp-route-filterByTeamMember="@filterByTeamMember" asp-route-filterByTaskCompleted="@((int)taskCompletionFilter)" asp-route-filterByTaskOverdue="@((int)TaskOverdueFilter.None)" asp-route-filterByTaskPriority="@((int)taskPriorityFilter)"><i class="bi bi-question-circle"></i> @Localisation.Get(user, "NONE")</a>
                            }
                        </li>
                        <li>
                            @if (taskOverdueFilter == TaskOverdueFilter.Overdue)
                            {
                                <a class="dropdown-item" asp-controller="Project" asp-action="Index" asp-route-view="@view" asp-route-id="@Model.Project.Id" asp-route-filterByTeamMember="@filterByTeamMember" asp-route-filterByTaskCompleted="@((int)taskCompletionFilter)" asp-route-filterByTaskOverdue="@((int)TaskOverdueFilter.Overdue)" asp-route-filterByTaskPriority="@((int)taskPriorityFilter)"><i class="bi bi-check-circle-fill"></i> @Localisation.Get(user, "OVERDUE")</a>
                            }
                            else
                            {
                                <a class="dropdown-item" asp-controller="Project" asp-action="Index" asp-route-view="@view" asp-route-id="@Model.Project.Id" asp-route-filterByTeamMember="@filterByTeamMember" asp-route-filterByTaskCompleted="@((int)taskCompletionFilter)" asp-route-filterByTaskOverdue="@((int)TaskOverdueFilter.Overdue)" asp-route-filterByTaskPriority="@((int)taskPriorityFilter)"><i class="bi bi-check-circle"></i> @Localisation.Get(user, "OVERDUE")</a>
                            }
                        </li>
                        <li>
                            @if (taskOverdueFilter == TaskOverdueFilter.NotOverdue)
                            {
                                <a class="dropdown-item" asp-controller="Project" asp-action="Index" asp-route-view="@view" asp-route-id="@Model.Project.Id" asp-route-filterByTeamMember="@filterByTeamMember" asp-route-filterByTaskCompleted="@((int)taskCompletionFilter)" asp-route-filterByTaskOverdue="@((int)TaskOverdueFilter.NotOverdue)" asp-route-filterByTaskPriority="@((int)taskPriorityFilter)"><i class="bi bi-circle-fill"></i> @Localisation.Get(user, "NOT_OVERDUE")</a>
                            }
                            else
                            {
                                <a class="dropdown-item" asp-controller="Project" asp-action="Index" asp-route-view="@view" asp-route-id="@Model.Project.Id" asp-route-filterByTeamMember="@filterByTeamMember" asp-route-filterByTaskCompleted="@((int)taskCompletionFilter)" asp-route-filterByTaskOverdue="@((int)TaskOverdueFilter.NotOverdue)" asp-route-filterByTaskPriority="@((int)taskPriorityFilter)"><i class="bi bi-circle"></i> @Localisation.Get(user, "NOT_OVERDUE")</a>
                            }

                        </li>
                    </ul>

                    <button type="button" class="btn btn-sm m-1 ps-btn-secondary dropdown-toggle" role="button" id="filterByTaskPriorityBtn" data-bs-toggle="dropdown" aria-expanded="false"><i class="@filterByTaskPriorityIcon"></i> @Localisation.Get(user, "FILTER_BY_TASK_PRIORITY_STATUS")</button>
                    <ul class="dropdown-menu" aria-labelledby="filterByTaskPriorityBtn">
                        <li>
                            @if (taskPriorityFilter == Priority.None)
                            {
                                <a class="dropdown-item" asp-controller="Project" asp-action="Index" asp-route-view="@view" asp-route-id="@Model.Project.Id" asp-route-filterByTeamMember="@filterByTeamMember" asp-route-filterByTaskCompleted="@((int)taskCompletionFilter)" asp-route-filterByTaskOverdue="@((int)taskOverdueFilter)" asp-route-filterByTaskPriority="@((int)Priority.None)"><i class="bi bi-question-circle-fill"></i> @Localisation.Get(user, "NONE")</a>
                            }
                            else
                            {
                                <a class="dropdown-item" asp-controller="Project" asp-action="Index" asp-route-view="@view" asp-route-id="@Model.Project.Id" asp-route-filterByTeamMember="@filterByTeamMember" asp-route-filterByTaskCompleted="@((int)taskCompletionFilter)" asp-route-filterByTaskOverdue="@((int)taskOverdueFilter)" asp-route-filterByTaskPriority="@((int)Priority.None)"><i class="bi bi-question-circle"></i> @Localisation.Get(user, "NONE")</a>
                            }
                        </li>
                        <li>
                            @if (taskPriorityFilter == Priority.Low)
                            {
                                <a class="dropdown-item" asp-controller="Project" asp-action="Index" asp-route-view="@view" asp-route-id="@Model.Project.Id" asp-route-filterByTeamMember="@filterByTeamMember" asp-route-filterByTaskCompleted="@((int)taskCompletionFilter)" asp-route-filterByTaskOverdue="@((int)taskOverdueFilter)" asp-route-filterByTaskPriority="@((int)Priority.Low)"><i class="bi bi-1-circle-fill"></i> @Localisation.Get(user, "LOW")</a>
                            }
                            else
                            {
                                <a class="dropdown-item" asp-controller="Project" asp-action="Index" asp-route-view="@view" asp-route-id="@Model.Project.Id" asp-route-filterByTeamMember="@filterByTeamMember" asp-route-filterByTaskCompleted="@((int)taskCompletionFilter)" asp-route-filterByTaskOverdue="@((int)taskOverdueFilter)" asp-route-filterByTaskPriority="@((int)Priority.Low)"><i class="bi bi-1-circle"></i> @Localisation.Get(user, "LOW")</a>
                            }
                        </li>
                        <li>
                            @if (taskPriorityFilter == Priority.Medium)
                            {
                                <a class="dropdown-item" asp-controller="Project" asp-action="Index" asp-route-view="@view" asp-route-id="@Model.Project.Id" asp-route-filterByTeamMember="@filterByTeamMember" asp-route-filterByTaskCompleted="@((int)taskCompletionFilter)" asp-route-filterByTaskOverdue="@((int)taskOverdueFilter)" asp-route-filterByTaskPriority="@((int)Priority.Medium)"><i class="bi bi-2-circle-fill"></i> @Localisation.Get(user, "MEDIUM")</a>
                            }
                            else
                            {
                                <a class="dropdown-item" asp-controller="Project" asp-action="Index" asp-route-view="@view" asp-route-id="@Model.Project.Id" asp-route-filterByTeamMember="@filterByTeamMember" asp-route-filterByTaskCompleted="@((int)taskCompletionFilter)" asp-route-filterByTaskOverdue="@((int)taskOverdueFilter)" asp-route-filterByTaskPriority="@((int)Priority.Medium)"><i class="bi bi-2-circle"></i> @Localisation.Get(user, "MEDIUM")</a>
                            }

                        </li>
                        <li>
                            @if (taskPriorityFilter == Priority.High)
                            {
                                <a class="dropdown-item" asp-controller="Project" asp-action="Index" asp-route-view="@view" asp-route-id="@Model.Project.Id" asp-route-filterByTeamMember="@filterByTeamMember" asp-route-filterByTaskCompleted="@((int)taskCompletionFilter)" asp-route-filterByTaskOverdue="@((int)taskOverdueFilter)" asp-route-filterByTaskPriority="@((int)Priority.High)"><i class="bi bi-3-circle-fill"></i> @Localisation.Get(user, "HIGH")</a>
                            }
                            else
                            {
                                <a class="dropdown-item" asp-controller="Project" asp-action="Index" asp-route-view="@view" asp-route-id="@Model.Project.Id" asp-route-filterByTeamMember="@filterByTeamMember" asp-route-filterByTaskCompleted="@((int)taskCompletionFilter)" asp-route-filterByTaskOverdue="@((int)taskOverdueFilter)" asp-route-filterByTaskPriority="@((int)Priority.High)"><i class="bi bi-3-circle"></i> @Localisation.Get(user, "HIGH")</a>
                            }

                        </li>
                    </ul>
                </div>
          </div>
        </div>
    </div>
    <ul class="nav nav-tabs">
        @{
            string listActive = string.Empty, cardActive = string.Empty, calendarActive = string.Empty, progressActive = string.Empty, dashboardActive = string.Empty;
            switch(indexView)
            {
                default:
                case ProjectIndexView.Cards:
                    cardActive = "active";
                    break;
                case ProjectIndexView.List:
                    listActive = "active";
                    break;
                case ProjectIndexView.Calendar:
                    calendarActive = "active";
                    break;
                case ProjectIndexView.Gantt:
                    progressActive = "active";
                    break;
                case ProjectIndexView.Dashboard:
                    dashboardActive = "active";
                    break;
            }
        }
        <li class="nav-item">
            <a class="nav-link ps-link-primary @listActive" asp-controller="Project" asp-action="Index" asp-route-id="@Model.Project.Id" asp-route-view="@((int)ProjectIndexView.List)" asp-route-filterByTeamMember="@filterByTeamMember" asp-route-filterByTaskCompleted="@((int)taskCompletionFilter)" asp-route-filterByTaskOverdue="@((int)taskOverdueFilter)" asp-route-filterByTaskPriority="@((int)taskPriorityFilter)">@Localisation.Get(user, "LIST")</a>
        </li>
        <li class="nav-item">
            <a class="nav-link ps-link-primary @cardActive" asp-controller="Project" asp-action="Index" asp-route-id="@Model.Project.Id" asp-route-view="@((int)ProjectIndexView.Cards)" asp-route-filterByTeamMember="@filterByTeamMember" asp-route-filterByTaskCompleted="@((int)taskCompletionFilter)" asp-route-filterByTaskOverdue="@((int)taskOverdueFilter)" asp-route-filterByTaskPriority="@((int)taskPriorityFilter)">@Localisation.Get(user, "BOARDS")</a>
        </li>
        @if (Model.PaymentTier >= PaymentTier.Plus)
        {
            <li class="nav-item">
                <a class="nav-link ps-link-primary @calendarActive" asp-controller="Project" asp-action="Index" asp-route-id="@Model.Project.Id" asp-route-view="@((int)ProjectIndexView.Calendar)" asp-route-filterByTeamMember="@filterByTeamMember" asp-route-filterByTaskCompleted="@((int)taskCompletionFilter)" asp-route-filterByTaskOverdue="@((int)taskOverdueFilter)" asp-route-filterByTaskPriority="@((int)taskPriorityFilter)">@Localisation.Get(user, "CALENDAR_VIEW_NAME")</a>
            </li>
            <li class="nav-item">
                <a class="nav-link ps-link-primary @progressActive" asp-controller="Project" asp-action="Index" asp-route-id="@Model.Project.Id" asp-route-view="@((int)ProjectIndexView.Gantt)" asp-route-filterByTeamMember="@filterByTeamMember" asp-route-filterByTaskCompleted="@((int)taskCompletionFilter)" asp-route-filterByTaskOverdue="@((int)taskOverdueFilter)" asp-route-filterByTaskPriority="@((int)taskPriorityFilter)">@Localisation.Get(user, "PROGRESS_VIEW_NAME")</a>
            </li>
        }
        <li class="nav-item">
            <a class="nav-link ps-link-primary @dashboardActive" asp-controller="Project" asp-action="Index" asp-route-id="@Model.Project.Id" asp-route-view="@((int)ProjectIndexView.Dashboard)" asp-route-filterByTeamMember="@filterByTeamMember" asp-route-filterByTaskCompleted="@((int)taskCompletionFilter)" asp-route-filterByTaskOverdue="@((int)taskOverdueFilter)" asp-route-filterByTaskPriority="@((int)taskPriorityFilter)">@Localisation.Get(user, "DASHBOARD")</a>
        </li>
    </ul>
    @if(indexView == ProjectIndexView.List)
    {
        <partial name="SubViews/_ListView" />
    }
    else if (indexView == ProjectIndexView.Calendar && Model.PaymentTier >= PaymentTier.Plus)
    {
        <partial name="SubViews/_Calendar" />
    }
    else if (indexView == ProjectIndexView.Gantt && Model.PaymentTier >= PaymentTier.Plus)
    {
        <partial name="SubViews/_Gantt" />
    }
    else if (indexView == ProjectIndexView.Dashboard)
    {
        <partial name="SubViews/_Dashboard" />
    }
    else
    {
        <partial name="SubViews/_CardView" />
    }
   
    <div class="card d-none" id="createCardDiv">
        <div class="card-body">
            <div class="d-grid gap-2">
                <div class="btn btn-outline-dark">
                    <form method="post" asp-controller="Project" asp-action="addcard">
                        @Html.HiddenFor(model => model.AddCard.ColumnId)
                        @Html.HiddenFor(model => model.AddCard.ProjectId)
                        <div class="row">
                            <div class="col-sm-10">
                                @Html.EditorFor(model => model.AddCard.Name, new { htmlAttributes = new { @class = "form-control form-control-sm", id = "cardNameField", placeholder = "Card Name" } })
                            </div>
                            <div class="col-sm-2">
                                <button type="submit" class="btn ps-btn-primary btn-sm">Submit</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>