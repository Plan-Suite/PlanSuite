@using Microsoft.AspNetCore.Identity
@using PlanSuite.Enums
@using PlanSuite.Models.Persistent
@using PlanSuite.Utility
@using System.Web
@inject UserManager<ApplicationUser> UserManager
@model PlanSuite.Models.Temporary.ProjectViewModel
@{
    ViewData["Title"] = Model.Project.Name;
    ApplicationUser user = await UserManager.GetUserAsync(User);
}

@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@functions {
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}


<input type="hidden" 
       id="RequestVerificationToken"
       name="RequestVerificationToken" 
       value="@GetAntiXsrfRequestToken()">


<script>
$(function () {
    $(".draggable").draggable({
        revert: "invalid"
    });

    $('.column').droppable({
        accept: '.draggable',
        drop: function (event, ui) {
            var dropped = ui.draggable;
            var droppedOn = $(this);
            $(dropped).detach().css({ top: 0, left: 0 }).appendTo(droppedOn);

            $.ajax({
                type: "POST",
                dataType: "json",
                contentType: "application/json",
                url: "/api/Project/movecard",
                beforeSend: function (request) {
                    request.setRequestHeader("RequestVerificationToken", $('#RequestVerificationToken').val());
                },
                data: JSON.stringify({ cardId: dropped[0].id, columnId: droppedOn[0].id }),
            });
        }
    });
});

function removeCard()
{
    const name = "#createCardDiv";
    $(name).off();
    $(name).addClass( "d-none" );
}

function removeEditForm()
{
    var dbId = $('#viewCardId').val();
    const name = "#viewCardEditText";
    $("#viewCardEditTextEditor").off();
    $(name).addClass( "d-none" );
    $("#viewCardText").removeClass( "d-none" );

    var text = $("#viewCardEditTextEditor").val();

    $("#viewCardText").text(text);

    $.ajax({
        type: "POST",
        dataType: "json",
        contentType: "application/json",
        url: "/api/Project/editcarddesc",
        beforeSend: function (request) {
            request.setRequestHeader("RequestVerificationToken", $('#RequestVerificationToken').val());
        },
        data: JSON.stringify({ cardId: dbId, description: text }),
    });
}

function removeEditLabel()
{
    var dbId = $('#viewCardId').val();
    const name = "#viewCardEditLabel";
    $("#viewCardEditLabelEditor").off();
    $(name).addClass( "d-none" );
    $("#viewCardLabel").removeClass( "d-none" );

    var text = $("#viewCardEditLabelEditor").val();
    if(isBlank(text))
    {
        text = "Card Name";
    }

    var desc = $("#viewCardText").text();
    $("#viewCardLabel").text(text);
    $(`#viewCardName_${dbId}`).text(text);
    $(`#viewCardName_${dbId}`).attr("onclick",`viewCardButton('${dbId}')`);

    $.ajax({
        type: "POST",
        dataType: "json",
        contentType: "application/json",
        url: "/api/Project/editcardname",
        beforeSend: function (request) {
            request.setRequestHeader("RequestVerificationToken", $('#RequestVerificationToken').val());
        },
        data: JSON.stringify({ cardId: dbId, name: text }),
    });
}

function removeDateEditor()
{
    var input = $("#viewCardDueDateDateTime").val();
    var dbId = $('#viewCardId').val();
    $("#viewCardDueDateDateTime").off();
    $("#viewCardDueDateEditor").addClass( "d-none" );
    $("#viewCardDueDate").removeClass( "d-none" );

    console.log(`removeDateEditor: ${input}`);
    var timestamp = 0;
    var dateEntered;
    if(isBlank(input))
    {
        dateEntered = 0;
    }
    else
    {
        dateEntered = new Date(input).getTime() / 1000;
    }

    var dateString = "None";
    if(dateEntered > 0)
    {
        dateString = `${new Date(dateEntered).toDateString()}`;
    }

    $("#viewCardDueDate").text(`<strong>Due By:</strong> ${dateString}`);

    $.ajax({
        type: "POST",
        dataType: "json",
        contentType: "application/json",
        url: "/api/Project/EditCardDueDate",
        beforeSend: function (request) {
            request.setRequestHeader("RequestVerificationToken", $('#RequestVerificationToken').val());
        },
        data: JSON.stringify({ cardId: dbId, timestamp: dateEntered }),
    });
}
</script>

@* Plan Suite Project Index Ads *@
@*<ins class="adsbygoogle"
     style="display:block"
     data-ad-client="ca-pub-1119258824927173"
     data-ad-slot="2594414105"
     data-ad-format="auto"
     data-full-width-responsive="true"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>*@

<h1 class="text-center">@Model.Project.Name</h1>
<hr />
<div class="alert alert-success d-none" id="addUserSuccess" role="alert">Sucessfully added new user to project.</div>
<div class="alert alert-danger d-none" id="addUserFail" role="alert">Failed to add user to project.</div>
<h4 class="text-muted">@Model.Project.Description</h4>
<p class="text-muted"><strong>Project Created:</strong> @Model.Project.CreatedDate<br /><strong>Project Due Date:</strong>
    @if(Model.Project.DueDate != null)
    {
         @Model.Project.DueDate
    }
    else 
    {
        <text>N/A</text>
    }
</p>

@* Add Column *@
<div class="modal fade" id="addColumnModal" tabindex="-1" aria-labelledby="addColumnLabel" aria-hidden="true">
    <div class="modal-dialog">
    <div class="modal-content">
        <div class="modal-header">
        <h5 class="modal-title" id="editProjectLabel"><strong>Add Column:</strong> Name Here</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <form method="post" asp-controller="Project" asp-action="AddColumn">
            @Html.HiddenFor(model => model.AddColumn.ProjectId)
            <div class="modal-body">
                <div class="form-floating">
                    @Html.EditorFor(model => model.AddColumn.Name, new { htmlAttributes = new { @class = "form-control", id = "editProjName" } })
                    @Html.LabelFor(model => model.AddColumn.Name, new { htmlAttributes = new { @class = "form-label" } })
                    @Html.ValidationMessageFor(model => model.AddColumn.Name, "", new { @class = "text-danger" })
                    <br>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn ps-btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn ps-btn-primary">Save Column</button>
                </div>
            </div>
        </form>
    </div>
    </div>
</div>

@* View Card *@
<partial name="SubViews/_ViewCard" />

@* Project Members *@
<partial name="SubViews/_ProjectMembers" />

@* Leave Project *@
<partial name="SubViews/_LeaveProject" />

@* Add Member *@
<partial name="SubViews/_AddMember" />

@* Project Navbar *@
<div class="row">
    <div class="col col-sm-10">
        <button type="button" class="btn m-1 ps-btn-success float-start" data-bs-toggle="modal" data-bs-target="#addColumnModal" onclick="addColumnBtn('@Model.Project.Id')">Add Column</button>
        <div class="btn-group" role="group">
            <button id="btnGroupDrop1" type="button" class="btn m-1 ps-btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">More</button>
            <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                <li><a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#projectMembersModal" onclick="viewProjectMembers()">See Members</a></li>
                @if(Model.ProjectRole >= PlanSuite.Enums.ProjectRole.Admin)
                {
                    <li><hr class="dropdown-divider"></li>
                    <li><a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#addMemberModal">Add Member</a></li>
                }
                @if(Model.ProjectRole != PlanSuite.Enums.ProjectRole.Owner)
                {
                    <li><hr class="dropdown-divider"></li>
                    <li><a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#leaveProjectModal">Leave Project</a></li>
                }
            </ul>
        </div>
    </div>
</div>

<div class="row">
    <partial name="SubViews/_CardView" />
    <div class="card d-none" id="createCardDiv">
        <div class="card-body">
            <div class="d-grid gap-2">
                <div class="btn btn-outline-dark">
                    <form method="post" asp-controller="Project" asp-action="addcard">
                        @Html.HiddenFor(model => model.AddCard.ColumnId)
                        @Html.HiddenFor(model => model.AddCard.ProjectId)
                        <div class="row">
                            <div class="col-sm-10">
                                @Html.EditorFor(model => model.AddCard.Name, new { htmlAttributes = new { @class = "form-control form-control-sm", id = "cardNameField", placeholder = "Card Name" } })
                            </div>
                            <div class="col-sm-2">
                                <button type="submit" class="btn ps-btn-primary btn-sm">Submit</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
function editName()
{
    var dbid = $('#viewCardId').val();
    var currentName = $('#viewCardLabel').text();
    console.log(`editName: ${currentName}`);
    $('#viewCardLabel').addClass("d-none");
    $('#viewCardEditLabel').removeClass("d-none");

    $('#viewCardEditLabelEditor').val(currentName);
    $('#viewCardEditLabelEditor').focus();
    $('#viewCardEditLabelEditor').on("focusout", removeEditLabel);
}

function editDescription()
{
    var dbid = $('#viewCardId').val();
    $('#viewCardText').addClass("d-none");
    $('#viewCardEditText').removeClass("d-none");

    $('#viewCardEditTextEditor').focus();
    $('#viewCardEditTextEditor').on("focusout", removeEditForm);
    $('#viewCardEditTextEditor').keydown(function(event){ 
    var id = event.key || event.which || event.keyCode || 0;   
    if (id == 13) {
        removeEditForm();
    }
});
}

function viewCardButton(dbId)
{
    $('#viewCardId').val(dbId);

    $.ajax({
        type: "GET",
        dataType: "json",
        contentType: "application/json",
        url: `/api/Project/getcard?cardId=${dbId}`,
        beforeSend: function (request) {
            request.setRequestHeader("RequestVerificationToken", $('#RequestVerificationToken').val());
        },
        success: function(response) {
            var dateString = "None";
            if(response.unixTimestamp > 0)
            {
                // I have to multiply by 1000 for some reason here idk why
                dateString = new Date(response.unixTimestamp * 1000).toDateString();
            }

            var priority = "@Model.Localisation.Get(user, "NONE")";
            if(response.priority == @((int)Priority.Low))
            {
                priority = '<span class="badge bg-success">@Model.Localisation.Get(user, "LOW")</span>';
            }
            else if(response.priority == @((int)Priority.Medium))
            {
                priority = '<span class="badge bg-warning">@Model.Localisation.Get(user, "MEDIUM")</span>';
            }
            else if(response.priority == @((int)Priority.High))
            {
                priority = '<span class="badge bg-danger">@Model.Localisation.Get(user, "HIGH")</span>';
            }

            var assignee = "@Model.Localisation.Get(user, "NOBODY")";
            console.log(response);
            if(response.assigneeName != "NOBODY")
            {
                assignee = response.assigneeName;
            }

            var checklistHolder = $("#checklistHolder");
            if(response.cardChecklists.length > 0)
            {
                checklistHolder.removeClass("d-none");
                response.cardChecklists.forEach(function(element) {
                    checklistHolder.append(`<div class="ps-card-checklist" id="Checklist_${element.id}">
                            <h6 id="ChecklistName_${element.id}">${element.checklistName}</h6>`);

                    checklistHolder.append(`<div id="ChecklistHolder_${element.id}">`);

                    response.checklistItems.forEach(function(checklistItem) {
                        var checklistDiv = $(`#Checklist_${checklistItem.id}`);

                        console.log(`#${checklistItem.id} ${checklistItem.checklistId} == ${element.id}`);

                        if(checklistItem.checklistId == element.id)
                        {
                            var string = "<div class=\"form-check\">";
                            if(checklistItem.itemTicked == false)
                            {
                                string = `<input class="form-check-input" type="checkbox" id="${checklistItem.checklistName}">\
                                                <label class="form-check-label" for="${checklistItem.ItemName}">${checklistItem.itemName}</label>`;
                            }
                            else
                            {
                                string = `<input class="form-check-input" type="checkbox" id="${checklistItem.ItemName}" checked>\
                                                <label class="form-check-label" for="${checklistItem.ItemName}"><s>${checklistItem.itemName}</s></label>`;
                            }
                            string += "</div>";
                            checklistDiv.append(string);
                        }

                    });

                    checklistHolder.append(`</div>`);

                })
            }
            else
            {
                checklistHolder.addClass("d-none");
            }

            $('#viewCardLabel').text(response.name);
            $('#viewCardText').html(response.markdownContent);
            $('#viewCardEditTextEditor').val(response.rawContent);
            $('#viewCardDueDate').html(`<strong>@Model.Localisation.Get(user, "VIEW_CARD_DUE_DATE")</strong> ${dateString}`);
            $('#viewCardPriority').html(`<strong>@Model.Localisation.Get(user, "VIEW_CARD_PRIORITY")</strong> ${priority}`);
            $('#viewCardAssignee').html(`<strong>@Model.Localisation.Get(user, "VIEW_CARD_ASSIGNEE")</strong> ${assignee}`);
        },
    });
}

function addNewCard(id)
{
    const name = "#createCardDiv";

    removeCard();

    $(name).detach().appendTo(`#${id}`);
    $(name).removeClass("d-none");

    $('#AddCard_ColumnId').val(id);
    $('#AddCard_ProjectId').val('@Model.Project.Id');
    $('#cardNameField').focus();

    $('#createCardDiv').on("focusout", removeCard);
}

function addColumnBtn(dbId)
{
    document.getElementById('AddColumn_ProjectId').value = dbId;
}
</script>